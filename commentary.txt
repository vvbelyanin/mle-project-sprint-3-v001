Привет, Анжела!    

Спасибо за ревью!    
Стараюсь отрабатывать все замечания, даже если они кажутся незначительными.     
Они отражают как раз то, что я не учел или недоработал.    

Комментарии идут в том порядке, в каком идут замечания на платформе.

1) "В целом удобно что ты разбил на разные этапы задачу, но..."    
Разбиение всех Dockerfile, docker-compose.yaml, app.py на разные, но похожие файлы, было сначала 
продиктовано желанием логически отделить этапы исполнения проекта.
Однако неизбыточность кода, конечно, приоритетнее. Да и логически отделить этапы можно и в инструкции.
Исправляю, спасибо.
Docker запускается одной командой с разными параметрами.    
Файлы docker-compose*.yaml код не дублируют.    
А неизбыточность кода реализовал импортами в файлах app*.py. 

2) "Инструкция переполнена информацией..."    
Я по неопытности не разобрался зачем нужна инструкция, теперь понятно, это не описание работы, а просто гайд.    
Укоротил инструкцию до простых команд, смысловую часть перенес в README.md.

3) "Судя по скрипту ты обучаешь модель заново, а не используешь модель с предыдущего спринта..."    
Тут такое дело. Мой пайплайн с прошлого проекта, оказывается, не умел предсказывать, точнее, выдавал ошибку, если на вход 
пайплайна подавать датасет с малым количеством строк или одной строкой, как для предсказания.    
Поэтому я решил взять модель из коробки, тем более что по метрикам она не сильно хуже (1-3%). Ну то есть в реале я бы так и 
поступил, если был бы ограничен в сроках. 
Но раз ты на это указала, то я все потестил и разобрался в чем дело (Когда производятся динамические манипуляции со столбцами, 
нужно все делать в fit, а в transform просто дублировать. Эта простая мысль до меня дошла не сразу). Код пайплайна довольно громоздкий, 
там отражены все без исключения алгоритмы предобработки, которые были в спринте, его привожу в model_pipeline.ipynb, если интересно.     
Но модель загружаю ту самую (см. load_model.py).

4) "Дашборд твой просто прекрасный... Единственный момент по оформлению гистограммы цен..."    
Да, мне кажется, важно чтобы было все ясно и понятно, исправил вручную, т.к. диапазоны значений задаются в коде.     
Но вообще диапазоны, наверное, можно форматировать динамически средствами PromQl.     

5) app.py. "Вижу тут есть дублирование функций, как в других app-скриптах..."    
И еще раз о дублировании кода, теперь в скриптах. Ты права, я и сам пытаюсь придерживаться, спасибо, что указала. 
Исправил импортами.

6) fastapi_handler.py. "Исключения лучше обрабатывать конкретные, а не любые..."    
Да, это классическая рекомендация, руки не дошли, добавил немного pickle и sklearn исключений.

7) docker-compose-stage-4.yaml. "Единообразие - всегда хорошо, так что раз APP_PORT занесен в env..."    
Тоже классика, вот прям в упор не заметил, поправил.

8) Dockerfile-stage-3. "Докерфайл верный, но отличий от файла Dockerfile нет никаких...".    
Да, оказывается, можно несколькими способами задавать файл со скриптом в виде переменной.     

9) Instructions.md. "Не знаю почему на платформе отображается криво файл инструкций..." См. пункт 2, инструкцию сократил     
(Попытался исправить ситуацию с эмодзи, может, прямая текстовая кодировка исправит дело).    

В целом, Анжела, спасибо большое за замечания от профессионала, они составляют, как мне кажется, 2/3 ценности всего обучения. 
Чтобы все это доработать, мне пришлось пересмотреть не только текущий, но и предыдущий проект. Казалось бы, мелочи, но они 
помогли докопаться до тонкостей.    

Вопрос у меня простой: как практик, подскажи, какие еще инструменты сейчас используются в деплое, на что можно посмотреть.    
Вот у нас был один-единственный нормальный вебинар (нас не очень балуют общением с преподавателями), мне показали unittest, 
logging и тесты на Github Action, такие полезные штуки, о которых ни слова не говорилось в спринте. Так что если что подскажешь, буду рад. 

Так что, если все правильно, то...

Еще раз спасибо и удачи, Анжела!

